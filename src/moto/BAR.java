

package moto;


import java.awt.Toolkit;
import javax.swing.JOptionPane;
import javax.swing.UIManager;

/**
 *
 * @author admin
 */
public class BAR extends javax.swing.JFrame {

    /**
     * Creates new form BAR
     */
    public static int PASA=0;
   public static  PROGRAMME PRO ;
    INSTRUCTION INST;
     public static Memory ME;
    public static  ROM RO;
    MOTO_INTERFACE IN;
    public BAR() {
        initComponents();
        SETICOn();
       
  
        PRO=new PROGRAMME();
        ME=new Memory();
        RO=new ROM();
      IN =new MOTO_INTERFACE();
      IN.setVisible(true);
      IN.setLocationRelativeTo(null);
      INST=new INSTRUCTION();
         INST.setVisible(true);
         INST.setLocationRelativeTo(null);
        
        
    }
    String SDG;
    public BAR(String SDG)
    {
        this.SDG=SDG;
    }
 public static void PUT() {
       
        MESA.setText("Accepte la nouvelle valeur");
       
    }
public static void CLEAR()
{
    MESA.setText(" ");
}
 public static void OPEN()
 {
      EXEC.setEnabled(true);
        REP.setEnabled(true);
        PAS.setEnabled(true);
        PROGRA.setEnabled(true);
        RAM.setEnabled(true);
        ROM.setEnabled(true);
         
 }
 public static void CLOSE()
 {
      EXEC.setEnabled(false);
        REP.setEnabled(false);
        PAS.setEnabled(false);
        PROGRA.setEnabled(false);
        RAM.setEnabled(false);
        ROM.setEnabled(false);
         PRO.dispose();
         RO.dispose();
         ME.dispose();
         RAM.setSelected(false);
         PROGRA.setSelected(false);
         ROM.setSelected(false);
         
         
       
        
 }
 public void LCLOSE()
 {
     PRO.dispose();
     
 }
  public BAR(int j) {
       
       
     
    }
 

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSeparator1 = new javax.swing.JSeparator();
        INT = new javax.swing.JPanel();
        PAS = new javax.swing.JButton();
        MESA = new javax.swing.JLabel();
        EXEC = new javax.swing.JButton();
        REP = new javax.swing.JButton();
        QUIT = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        FENE = new javax.swing.JMenu();
        PROGRA = new javax.swing.JCheckBoxMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        RAM = new javax.swing.JCheckBoxMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        ROM = new javax.swing.JCheckBoxMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(900, 150));
        setMinimumSize(new java.awt.Dimension(900, 150));
        setPreferredSize(new java.awt.Dimension(900, 150));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        getContentPane().add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, 0));

        INT.setBackground(new java.awt.Color(255, 255, 255));
        INT.setMaximumSize(new java.awt.Dimension(840, 50));
        INT.setMinimumSize(new java.awt.Dimension(840, 50));

        PAS.setBackground(new java.awt.Color(255, 0, 0));
        PAS.setIcon(new javax.swing.ImageIcon(getClass().getResource("/moto/ICONS/update_status_60.png"))); // NOI18N
        PAS.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        PAS.setEnabled(false);
        PAS.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                PASMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                PASMouseExited(evt);
            }
        });
        PAS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PASActionPerformed(evt);
            }
        });

        MESA.setBackground(new java.awt.Color(255, 255, 255));
        MESA.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        MESA.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        EXEC.setBackground(new java.awt.Color(255, 0, 0));
        EXEC.setIcon(new javax.swing.ImageIcon(getClass().getResource("/moto/ICONS/NAM.png"))); // NOI18N
        EXEC.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        EXEC.setEnabled(false);
        EXEC.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                EXECMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                EXECMouseExited(evt);
            }
        });
        EXEC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EXECActionPerformed(evt);
            }
        });

        REP.setBackground(new java.awt.Color(255, 0, 0));
        REP.setIcon(new javax.swing.ImageIcon(getClass().getResource("/moto/ICONS/refresh_60.png"))); // NOI18N
        REP.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        REP.setEnabled(false);
        REP.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                REPMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                REPMouseExited(evt);
            }
        });
        REP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                REPActionPerformed(evt);
            }
        });

        QUIT.setBackground(new java.awt.Color(0, 0, 0));
        QUIT.setForeground(new java.awt.Color(255, 255, 255));
        QUIT.setText("EXIT");
        QUIT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                QUITActionPerformed(evt);
            }
        });

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/moto/ICONS/note_60.png"))); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout INTLayout = new javax.swing.GroupLayout(INT);
        INT.setLayout(INTLayout);
        INTLayout.setHorizontalGroup(
            INTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(INTLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(PAS, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addComponent(EXEC, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addComponent(REP, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(INTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(INTLayout.createSequentialGroup()
                        .addGap(156, 156, 156)
                        .addComponent(MESA, javax.swing.GroupLayout.PREFERRED_SIZE, 456, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, INTLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(QUIT)
                        .addContainerGap())))
        );
        INTLayout.setVerticalGroup(
            INTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(INTLayout.createSequentialGroup()
                .addGroup(INTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(INTLayout.createSequentialGroup()
                        .addComponent(QUIT)
                        .addGap(3, 3, 3)
                        .addComponent(MESA, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(INTLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(INTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(EXEC, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(PAS, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(REP, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(INTLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );

        getContentPane().add(INT, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 890, 50));

        jMenu1.setText("FICHIER");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("SIMU");
        jMenuBar1.add(jMenu2);

        FENE.setText("Fenetre");
        FENE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FENEActionPerformed(evt);
            }
        });

        PROGRA.setText("PROGRAMME");
        PROGRA.setEnabled(false);
        PROGRA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PROGRAActionPerformed(evt);
            }
        });
        FENE.add(PROGRA);
        FENE.add(jSeparator2);

        RAM.setText("RAM");
        RAM.setEnabled(false);
        RAM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RAMActionPerformed(evt);
            }
        });
        FENE.add(RAM);
        FENE.add(jSeparator3);

        ROM.setText("ROM");
        ROM.setEnabled(false);
        ROM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ROMActionPerformed(evt);
            }
        });
        FENE.add(ROM);

        jMenuBar1.add(FENE);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void FENEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FENEActionPerformed
  
        
    }//GEN-LAST:event_FENEActionPerformed

    private void PROGRAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PROGRAActionPerformed
       if (PROGRA.isSelected())
    {
      
      PRO.setVisible(true);
    PRO.setLocationRelativeTo(null);
    }
         if (PROGRA.isSelected()==false)
    {
      
      PRO.dispose();
    }
       
       
    }//GEN-LAST:event_PROGRAActionPerformed

    private void RAMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RAMActionPerformed
         if (RAM.isSelected())
    {
      
      ME.setVisible(true);
    ME.setLocationRelativeTo(null);
    }
         if (RAM.isSelected()==false)
    {
      
      ME.dispose();
    }
    }//GEN-LAST:event_RAMActionPerformed

    
    private void ROMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ROMActionPerformed
           if (ROM.isSelected())
    {
      
      RO.setVisible(true);
   RO.setLocationRelativeTo(null);
    }
         if (ROM.isSelected()==false)
    {
      
     RO.dispose();
    }
    
    }//GEN-LAST:event_ROMActionPerformed

    private void PASActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PASActionPerformed

      
     
      String STR=PRO.ADD(PASA);
      
     String G[]=STR.split("           ");
     String A=G[0];
     A=A.trim();
     IN.SETPCS(A);
     String B=G[1];
     B=B.trim();
     IN.TERMIN(B.toUpperCase());
     if(B.contains("#"))
     {
         String L[]=B.split("#+[\\$]");
         L[0]=L[0].trim();
         L[1]=L[1].trim();
         if(L[0].equalsIgnoreCase("lda"))
         {
           IN.SETA(L[1]);
         }
         else if(L[0].equalsIgnoreCase("ldb"))
         {
             IN.SETB(L[1]);
         }
          else if(L[0].equalsIgnoreCase("ldx"))
         {
             IN.SETX(L[1]);
         }
           else if(L[0].equalsIgnoreCase("ldy"))
         {
             IN.SETY(L[1]);
         }
           else if(L[0].equalsIgnoreCase("lds"))
         {
             IN.SETS(L[1]);
         }
          else if(L[0].equalsIgnoreCase("ldu"))
         {
             IN.SETU(L[1]);
         }
         else if( L[0].equalsIgnoreCase("ADDA"))
          {
              String HEX1=IN.GETA();
              String HEX2=L[1];
              int num1= Integer.parseInt(HEX1, 16);
              int num2=Integer.parseInt(HEX2, 16);
              int SUM=num1+num2;
              String RESULT=Integer.toHexString(SUM).toUpperCase();
             
              IN.setA(RESULT);
          }
          else if( L[0].equalsIgnoreCase("ADDB"))
          {
              String HEX1=IN.GETB();
              String HEX2=L[1];
              int num1= Integer.parseInt(HEX1, 16);
              int num2=Integer.parseInt(HEX2, 16);
              int SUM=num1+num2;
              String RESULT=Integer.toHexString(SUM).toUpperCase();
              IN.setA(RESULT);
          }
           else if( L[0].equalsIgnoreCase("SUBA"))
          {
              String HEX1=IN.GETA();
              String HEX2=L[1];
              int num1= Integer.parseInt(HEX1, 16);
              int num2=Integer.parseInt(HEX2, 16);
              int SUM=num1-num2;
              String RESULT=Integer.toHexString(SUM).toUpperCase();
              IN.setA(RESULT);
          }
           else if( L[0].equalsIgnoreCase("SUBB"))
          {
              String HEX1=IN.GETB();
              String HEX2=L[1];
              int num1= Integer.parseInt(HEX1, 16);
              int num2=Integer.parseInt(HEX2, 16);
              int SUM=num1-num2;
              String RESULT=Integer.toHexString(SUM).toUpperCase();
              IN.setB(RESULT);
          }
       
              
         
     }
     
     else if (!B.contains("#"))
     {
         String L[]=B.split("[\\$]");
         L[0]=L[0].trim();
         L[1]=L[1].trim();
           if(L[0].equalsIgnoreCase("STA"))
         {
           String STA= IN.GETA();
          
           ME.MEMSET(L[1], STA);
         }
                if(L[0].equalsIgnoreCase("STB"))
         {
           String STB= IN.GETB();
          
           ME.MEMSET(L[1], STB);
         }
                if(L[0].equalsIgnoreCase("LDB"))
         {
          // String STB= IN.SETB();
          IN.SETB(ME.MEMGET(L[1]));
          
           
         }
                 if(L[0].equalsIgnoreCase("LDA"))
         {
          // String STB= IN.SETB();
          IN.SETB(ME.MEMGET(L[1]));
          
         }
                  else if( L[0].equalsIgnoreCase("ADDA"))
          {
              String HEX1=IN.GETA();
              String HEX2=ME.MEMGET(L[1]);
              int num1= Integer.parseInt(HEX1, 16);
              int num2=Integer.parseInt(HEX2, 16);
              int SUM=num1+num2;
              String RESULT=Integer.toHexString(SUM).toUpperCase();
             
              IN.setA(RESULT);
          }
          else if( L[0].equalsIgnoreCase("ADDB"))
          {
              String HEX1=IN.GETB();
              String HEX2=ME.MEMGET(L[1]);
              int num1= Integer.parseInt(HEX1, 16);
              int num2=Integer.parseInt(HEX2, 16);
              int SUM=num1+num2;
              String RESULT=Integer.toHexString(SUM).toUpperCase();
              IN.setB(RESULT);
          }
                   else if( L[0].equalsIgnoreCase("SUBA"))
          {
              String HEX1=IN.GETA();
              String HEX2=ME.MEMGET(L[1]);
              int num1= Integer.parseInt(HEX1, 16);
              int num2=Integer.parseInt(HEX2, 16);
              int SUM=num1-num2;
              String RESULT=Integer.toHexString(SUM).toUpperCase();
              IN.setA(RESULT);
          }
              else if( L[0].equalsIgnoreCase("SUBB"))
          {
              String HEX1=IN.GETB();
              String HEX2=ME.MEMGET(L[1]);
              int num1= Integer.parseInt(HEX1, 16);
              int num2=Integer.parseInt(HEX2, 16);
              int SUM=num1-num2;
              String RESULT=Integer.toHexString(SUM).toUpperCase();
              IN.setB(RESULT);
          }
                 
          
           
     }
    
     if(!B.equalsIgnoreCase("end") || !B.equalsIgnoreCase("swi"))
      PASA++;
      
        
    }//GEN-LAST:event_PASActionPerformed

    private void EXECActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EXECActionPerformed
String V;
PASA=0;
        do
{
    String STR=PRO.ADD(PASA);
      
     String G[]=STR.split("           ");
     String A=G[0];
     A=A.trim();
     IN.SETPCS(A);
     String B=G[1];
     B=B.trim();
     IN.TERMIN(B.toUpperCase());
     if(B.contains("#"))
     {
         String L[]=B.split("#+[\\$]");
         L[0]=L[0].trim();
         L[1]=L[1].trim();
         if(L[0].equalsIgnoreCase("lda"))
         {
           IN.SETA(L[1]);
         }
         else if(L[0].equalsIgnoreCase("ldb"))
         {
             IN.SETB(L[1]);
         }
          else if(L[0].equalsIgnoreCase("ldx"))
         {
             IN.SETX(L[1]);
         }
           else if(L[0].equalsIgnoreCase("ldy"))
         {
             IN.SETY(L[1]);
         }
           else if(L[0].equalsIgnoreCase("lds"))
         {
             IN.SETS(L[1]);
         }
          else if(L[0].equalsIgnoreCase("ldu"))
         {
             IN.SETU(L[1]);
         }
          else if( L[0].equalsIgnoreCase("ADDA"))
          {
              String HEX1=IN.GETA();
              String HEX2=L[1];
              int num1= Integer.parseInt(HEX1, 16);
              int num2=Integer.parseInt(HEX2, 16);
              int SUM=num1+num2;
              String RESULT=Integer.toHexString(SUM).toUpperCase();
              System.out.println(RESULT);
              IN.setA(RESULT);
          }
        
          else if( L[0].equalsIgnoreCase("ADDB"))
          {
              String HEX1=IN.GETB();
              String HEX2=L[1];
              int num1= Integer.parseInt(HEX1, 16);
              int num2=Integer.parseInt(HEX2, 16);
              int SUM=num1+num2;
              String RESULT=Integer.toHexString(SUM).toUpperCase();
              IN.setA(RESULT);
          }
         else if( L[0].equalsIgnoreCase("SUBA"))
          {
              String HEX1=IN.GETA();
              String HEX2=L[1];
              int num1= Integer.parseInt(HEX1, 16);
              int num2=Integer.parseInt(HEX2, 16);
              int SUM=num1-num2;
              String RESULT=Integer.toHexString(SUM).toUpperCase();
              IN.setA(RESULT);
          }
           else if( L[0].equalsIgnoreCase("SUBB"))
          {
              String HEX1=IN.GETB();
              String HEX2=L[1];
              int num1= Integer.parseInt(HEX1, 16);
              int num2=Integer.parseInt(HEX2, 16);
              int SUM=num1-num2;
              String RESULT=Integer.toHexString(SUM).toUpperCase();
              IN.setB(RESULT);
          }
         
          
       
              
         
     }
     
     else if (!B.contains("#"))
     {
         String L[]=B.split("[\\$]");
         L[0]=L[0].trim();
         L[1]=L[1].trim();
           if(L[0].equalsIgnoreCase("STA"))
         {
           String STA= IN.GETA();
          
           ME.MEMSET(L[1], STA);
         }
           if(L[0].equalsIgnoreCase("STB"))
         {
           String STB= IN.GETB();
          
           ME.MEMSET(L[1], STB);
         }
           if(L[0].equalsIgnoreCase("LDB"))
         {
          // String STB= IN.SETB();
          IN.SETB(ME.MEMGET(L[1]));
          
           
         }
            if(L[0].equalsIgnoreCase("LDA"))
         {
          // String STB= IN.SETB();
          IN.SETB(ME.MEMGET(L[1]));
          
         }
            else if( L[0].equalsIgnoreCase("ADDA"))
          {
              String HEX1=IN.GETA();
              String HEX2=ME.MEMGET(L[1]);
              int num1= Integer.parseInt(HEX1, 16);
              int num2=Integer.parseInt(HEX2, 16);
              int SUM=num1+num2;
              String RESULT=Integer.toHexString(SUM).toUpperCase();
             
              IN.setA(RESULT);
          }
          else if( L[0].equalsIgnoreCase("ADDB"))
          {
              String HEX1=IN.GETB();
              String HEX2=ME.MEMGET(L[1]);
              int num1= Integer.parseInt(HEX1, 16);
              int num2=Integer.parseInt(HEX2, 16);
              int SUM=num1+num2;
              String RESULT=Integer.toHexString(SUM).toUpperCase();
              IN.setB(RESULT);
          }
             else if( L[0].equalsIgnoreCase("SUBA"))
          {
              String HEX1=IN.GETA();
              String HEX2=ME.MEMGET(L[1]);
              int num1= Integer.parseInt(HEX1, 16);
              int num2=Integer.parseInt(HEX2, 16);
              int SUM=num1-num2;
              String RESULT=Integer.toHexString(SUM).toUpperCase();
              IN.setA(RESULT);
          }
              else if( L[0].equalsIgnoreCase("SUBB"))
          {
              String HEX1=IN.GETB();
              String HEX2=ME.MEMGET(L[1]);
              int num1= Integer.parseInt(HEX1, 16);
              int num2=Integer.parseInt(HEX2, 16);
              int SUM=num1-num2;
              String RESULT=Integer.toHexString(SUM).toUpperCase();
              IN.setB(RESULT);
          }
          
          
           
     }
    
    
     V=B;
     PASA++;
      
}while(!V.equalsIgnoreCase("end") || !V.equalsIgnoreCase("swi"));
        
        
    }//GEN-LAST:event_EXECActionPerformed

    private void REPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_REPActionPerformed
PASA=0;

  PRO.SELECT(PASA);
  PRO.clear();
  IN.REINS();
  ME.RESET();
  RO.RESETRO();
  
  
        

    }//GEN-LAST:event_REPActionPerformed

    private void PASMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PASMouseEntered
    
        MESA.setText("executer l'istruction suivant");
    }//GEN-LAST:event_PASMouseEntered

    private void PASMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PASMouseExited
MESA.setText(null);    }//GEN-LAST:event_PASMouseExited

    private void EXECMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_EXECMouseEntered
    
        MESA.setText("executer le programme jusqu'a la fin");
        
    }//GEN-LAST:event_EXECMouseEntered

    private void EXECMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_EXECMouseExited
     
       MESA.setText(null);
    }//GEN-LAST:event_EXECMouseExited

    private void REPMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_REPMouseEntered
       MESA.setText("Reinitialise le programme");
    }//GEN-LAST:event_REPMouseEntered

    private void REPMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_REPMouseExited
     MESA.setText(null);
    }//GEN-LAST:event_REPMouseExited

    private void QUITActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_QUITActionPerformed
       int n=JOptionPane.showConfirmDialog(null, "are you sure you want to quit ??", "EXIT", JOptionPane.YES_NO_OPTION);
       if(n==JOptionPane.YES_OPTION)
       {
          this.dispose();
          INST.dispose();
          IN.dispose();
          RO.dispose();
          ME.dispose();
          PRO.dispose();
          
       }
    }//GEN-LAST:event_QUITActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       
        
         INST.setVisible(true);
         INST.setLocationRelativeTo(null);
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
             UIManager.setLookAndFeel("com.jtattoo.plaf.texture.TextureLookAndFeel");
          /*  for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }*/
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BAR.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BAR.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BAR.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BAR.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BAR().setVisible(true);
            }
        });
    }
     private void SETICOn() {
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("ICONS//MOTO.png")));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JButton EXEC;
    public static javax.swing.JMenu FENE;
    private javax.swing.JPanel INT;
    private static javax.swing.JLabel MESA;
    public static javax.swing.JButton PAS;
    public static javax.swing.JCheckBoxMenuItem PROGRA;
    private javax.swing.JButton QUIT;
    public static javax.swing.JCheckBoxMenuItem RAM;
    public static javax.swing.JButton REP;
    public static javax.swing.JCheckBoxMenuItem ROM;
    private javax.swing.JButton jButton1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    // End of variables declaration//GEN-END:variables
}
